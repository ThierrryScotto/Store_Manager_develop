{
	"swagger": "2.0",
	"info": {
	  "version": "1.0",
	  "title": "Store Manager",
	  "description": "Store Manager is a web application that helps store owners manage sales and product inventory"
	},
	"schemes": [
	  "https"
	],
	"host": "store-manager-develop.herokuapp.com",
	"basePath": "/api/v1",
	"securityDefinitions": {
	  "Bearer": {
		"type": "apiKey",
		"name": "Authorization",
		"in": "header"
	  }
	},
	"tags": [
	  {
		"name": "User",
		"description": "API for users in the system"
	  },
	  {
		"name": "Product",
		"description": "API for products in the system"
	  },
	  {
		"name": "Sale",
		"description": "API for Sales made in the system"
	  },
	  {
		"name": "Category",
		"description": "API for cateories"
	  }
	],
	"paths": {
	  "/auth/createUser": {
		"post": {
		  "description": "Admin creates a new user and persist the information to the database",
		  "summary": "Handles the creation of a new attendant account",
		  "tags": [
			"User"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "required": true,
			  "description": "This is the request body object containing users' create information",
			  "schema": {
				"$ref": "#/definitions/UserSignUprequest"
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "User has been successfully registered"
			},
			"400": {
			  "description": "Please fill in the fields"
			},
			"409": {
			  "description": "Username is taken"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		}
	  },
	  "/auth/{userId}": {
		"get": {
		  "description": "Admin can get a single user that is in the databse",
		  "summary": "Handles the retrieving of a user detail",
		  "tags": [
			"User"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "parameters": [
			{
			  "in": "path",
			  "name": "userId",
			  "required": true,
			  "description": "This is the request param ID passed in the params"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success"
			},
			"404": {
			  "description": "User does not exist"
			},
			"401": {
			  "description": "Kindly sign in"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		},
		"put": {
			"description": "Admin can update a single user that is in the databse",
			"summary": "Handles the updating of a user detail",
			"tags": [
			  "User"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "userId",
				"required": true,
				"description": "This is the request param ID passed in the params"
			  },
			  {
				"in": "body",
				"name": "body",
				"required": true,
				"description": "This is the request body object containing users' update information",
				"schema": {
				  "$ref": "#/definitions/UserSignUprequest"
				}
			  }
			],
			"responses": {
			  "200": {
				"description": "Successfully updates User"
			  },
			  "404": {
				"description": "User does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  },
		  "delete": {
			"description": "Admin can delete a single user that is in the databse",
			"summary": "Handles the delet of a user detail",
			"tags": [
			  "User"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "userId",
				"required": true,
				"description": "This is the request param ID passed in the params"
			  }
			],
			"responses": {
			  "200": {
				"description": "Successfully deleted User"
			  },
			  "404": {
				"description": "User does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  }
	  },
	  "/auth/users": {
		"get": {
		  "description": "Admin can get all users in the databse",
		  "summary": "Handles the retrieving of all users details",
		  "tags": [
			"User"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success"
			},
			"404": {
			  "description": "No users found"
			},
			"401": {
			  "description": "Kindly sign in"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		}
	  },
	  "/auth/login": {
		"post": {
		  "description": "This endpoint login a user into the application",
		  "summary": "Login the user into the application",
		  "tags": [
			"User"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "required": true,
			  "description": "This is the request body object containing users' login information",
			  "schema": {
				"$ref": "#/definitions/UserLoginrequest"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success"
			},
			"401": {
			  "description": "Invalid credentials"
			},
			"404": {
			  "description": "User does not exist"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		}
	  },
	  "/products": {
		"get": {
		  "description": "Fetches the products from the database",
		  "summary": "Gets products profile",
		  "tags": [
			"Product"
		  ],
		  "produces": [
			"application/json,"
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Sucsess"
			},
			"401": {
			  "description": "Kindly sign in"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		},
		"post": {
			"description": "Admin can post a single product that is in the databse",
			"summary": "Handles the posting of a product detail",
			"tags": [
			  "Product"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "body",
				"name": "body",
				"required": true,
				"description": "This is the request body object containing users' create information",
				"schema": {
				  "$ref": "#/definitions/CreateProductrequest"
				}
			  }
			],
			"responses": {
			  "200": {
				"description": "Successfully created product"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  }
	  },
	 "/products/{productId}": {
		"get": {
		  "description": "Logged user can get a single product that is in the databse",
		  "summary": "Handles the retrieving of a product detail",
		  "tags": [
			"Product"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "parameters": [
			{
			  "in": "path",
			  "name": "productId",
			  "required": true,
			  "description": "This is the request param ID passed in the params"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success"
			},
			"404": {
			  "description": "Product does not exist"
			},
			"401": {
			  "description": "Kindly sign in"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		},
		"put": {
			"description": "Admin can update a single product that is in the databse",
			"summary": "Handles the updating of a product detail",
			"tags": [
			  "Product"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "productId",
				"required": true,
				"description": "This is the request param ID passed in the params"
			  },
			  {
				"in": "body",
				"name": "body",
				"required": true,
				"description": "This is the request body object containing users' update information",
				"schema": {
				  "$ref": "#/definitions/CreateProductrequest"
				}
			  }
			],
			"responses": {
			  "200": {
				"description": "Successfully updates product"
			  },
			  "404": {
				"description": "product does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  },
		  "delete": {
			"description": "Admin can delete a single product that is in the databse",
			"summary": "Handles the delet of a product detail",
			"tags": [
			  "Product"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "userId",
				"required": true,
				"description": "This is the request param ID passed in the params"
			  }
			],
			"responses": {
			  "200": {
				"description": "Successfully deleted product"
			  },
			  "404": {
				"description": "product does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  }
	  },
	  "/products/{productId}/category": {
		"put": {
			"description": "Logd in users can update a product category that is in the databse",
			"summary": "Handles the updating of a product category",
			"tags": [
			  "Product"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "productId",
				"required": true,
				"description": "This is the request param ID passed in the params"
			  },
			  {
				"in": "body",
				"name": "body",
				"required": true,
				"description": "This is the request body object containing product category' update information",
				"schema": {
				  "$ref": "#/definitions/CreateProductCategoryrequest"
				}
			  }
			],
			"responses": {
			  "200": {
				"description": "Successfully updates product category"
			  },
			  "404": {
				"description": "product does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  }
	  },
	  "/products/{searchString}/search": {
		"get": {
			"description": "Logged user can search for a product that is in the databse",
			"summary": "Handles the searching of a product detail",
			"tags": [
			  "Product"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "searchString",
				"required": true,
				"description": "This is the request param search srting passed in the params"
			  }
			],
			"responses": {
			  "200": { 
				"description": "Success"
			  },
			  "404": {
				"description": "Not found"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  }
	  },
	  "/categories": {
		"get": {
			"description": "Fetches the category from the database",
			"summary": "Gets category profile",
			"tags": [
			  "Category"
			],
			"produces": [
			  "application/json,"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"responses": {
			  "200": {
				"description": "Sucsess"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  },
		"post": {
		  "description": "Admin creates a new category and persist the information to the database",
		  "summary": "Handles the creation of a new category account",
		  "tags": [
			"Category"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "required": true,
			  "description": "This is the request body object containing category create information",
			  "schema": {
				"$ref": "#/definitions/CreateProductCategoryrequest"
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Category has been successfully created"
			},
			"400": {
			  "description": "Please fill in the fields"
			},
			"409": {
			  "description": "Category name already exist"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		}
	  },
	  "/categories/{categoryId}": {
		"get": {
		  "description": "Logged in user can get a single category in the databse",
		  "summary": "Handles the retrieving of a category detail",
		  "tags": [
			"Category"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "parameters": [
			{
			  "in": "path",
			  "name": "categoryId",
			  "required": true,
			  "description": "This is the request param ID passed in the params"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Success"
			},
			"404": {
			  "description": "category does not exist"
			},
			"401": {
			  "description": "Kindly sign in"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		},
		"put": {
			"description": "Admin can update a category in the databse",
			"summary": "Handles the updating of a category detail",
			"tags": [
			  "Category"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "categoryId",
				"required": true,
				"description": "This is the request param ID passed in the params"
			  },
			  {
				"in": "body",
				"name": "body",
				"required": true,
				"description": "This is the request body object containing users' update information",
				"schema": {
				  "$ref": "#/definitions/CreateProductCategoryrequest"
				}
			  }
			],
			"responses": {
			  "200": {
				"description": "Successfully updates category"
			  },
			  "404": {
				"description": "Category does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  },
		  "delete": {
			"description": "Admin can delete a single category that is in the databse",
			"summary": "Handles the deletion of a category detail",
			"tags": [
			  "Category"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "categoryId",
				"required": true,
				"description": "This is the request param ID passed in the params"
			  }
			],
			"responses": {
			  "200": {
				"description": "Successfully deleted category"
			  },
			  "404": {
				"description": "category does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  }
	  },
	  "/sales": {
		"get": {
			"description": "Fetches the sales from the database",
			"summary": "Gets category profile",
			"tags": [
			  "Sale"
			],
			"produces": [
			  "application/json,"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"responses": {
			  "200": {
				"description": "Sucsess"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  },
		"post": {
		  "description": "Admin creates a new sales and persist the information to the database",
		  "summary": "Handles the creation of a new sales account",
		  "tags": [
			"Sale"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "required": true,
			  "description": "This is the request body object containing sale create information",
			  "schema": {
				"type":"array",
				"items":{
					"$ref": "#/definitions/CreateSaleRequest"
				}				
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Sales has been successfully created"
			},
			"400": {
			  "description": "Please fill in the fields"
			},
			"403": {
			  "description": "More than in stock"
			},
			"500": {
			  "description": "Internal server error"
			}
		  }
		}
	  },
	  "/sales/{salesId}": {
		"get": {
			"description": "Admin and sale record owner can get a single sale record that is in the databse",
			"summary": "Handles the retrieving of a sale record detail",
			"tags": [
			  "Sale"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"parameters": [
			  {
				"in": "path",
				"name": "salesId",
				"required": true,
				"description": "This is the request param ID passed in the params"
			  }
			],
			"responses": {
			  "200": {
				"description": "Success"
			  },
			  "404": {
				"description": "sales record does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  }
	  },
	  "user/sales": {
		"get": {
			"description": "Attendantcan get all owned sales record",
			"summary": "Handles the retrieving of owned sales records",
			"tags": [
			  "Sale"
			],
			"produces": [
			  "application/json"
			],
			"security": [
			  {
				"Bearer": []
			  }
			],
			"responses": {
			  "200": {
				"description": "Success"
			  },
			  "404": {
				"description": "sales record does not exist"
			  },
			  "401": {
				"description": "Kindly sign in"
			  },
			  "500": {
				"description": "Internal server error"
			  }
			}
		  }
	  }
	},  
	"definitions": {
	  "UserSignUprequest": {
		"title": "User create Request",
		"type": "object",
		"properties": {
		  "username": {
			"description": "username of the user",
			"type": "string"
		  },
		  "email": {
			"description": "username of the user",
			"type": "string"
		  },
		  "name": {
			"description": "The Fullname of the user",
			"type": "string"
		  },
		  "password": {
			"description": "The Password of the user",
			"type": "string"
		  }
		},
		"example": {
		  "username": "users",
		  "email": "example@example.com",
		  "name": "Users",
		  "password": "user1234",
		  "role": "attendant"
		},
		"required": [
		  "username, email, name, password, role"
		]
	  },
	  "UserLoginrequest": {
		"title": "User Login Request",
		"type": "object",
		"properties": {
		  "username": {
			"description": "The username address of the user",
			"type": "string"
		  },
		  "password": {
			"description": "The Password of the user",
			"type": "string"
		  }
		},
		"example": {
		  "username": "admin",
		  "password": "admin"
		},
		"required": [
		  "username, password"
		]
	  },
	  "CreateProductrequest": {
			"title": "Product create Request",
			"type": "object",
			"properties": {
			  "productName": {
				"description": "product Name",
				"type": "string"
			  },
			  "description": {
				"description": "Product description",
				"type": "string"
			  },
			  "image": {
				"description": "Image Url",
				"type": "string"
			  },
			  "min": {
				"description": "Mininmum inventory allowed",
				"type": "integer"
			  },
			  "price": {
				"description": "product pricer",
				"type": "integer"
			  },
			  "quantity": {
				"description": "The Password of the user",
				"type": "integer"
			  }
			},
			"example": {
			  "productName": "Name",
			  "description": "description must be minimum of five words",
			  "image": "Users",
			  "price": 1000,
			  "quantity": 100,
			  "min": 10
			},
			"required": [
			  "productName, description, image, price, quantity, min"
			]
	  },
	"CreateProductCategoryrequest": {
		"title": "add Product to a category Request",
		"type": "object",
		"properties": {
		  "categoryName": {
			"description": "category Name",
			"type": "string"
		  }
		},
		"example": {
		  "categoryName": "Flat shoes"
		},
		"required": [
		  "categoryName"
		]
  },
  "CreateSaleRequest": {
	"title": "add Sales to a category Request",
	"type": "object",
	"properties": {
		"productName": {
		  "description": "product Name",
		  "type": "string"
		},
		"productId": {
		  "description": "Product ID",
		  "type": "integer"
		},
		"quantity": {
		  "description": "The Password of the user",
		  "type": "integer"
		}
	  },
	  "example": {
		"productName": "Name",
		"productId": 1,
		"price": 1000,
		"quantity": 100
	  },
	  "required": [
		"productName, productId, quantity"
	  ]
  }
}
}